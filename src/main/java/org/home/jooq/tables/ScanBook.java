/**
 * This class is generated by jOOQ
 */
package org.home.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.home.jooq.DefaultSchema;
import org.home.jooq.Keys;
import org.home.jooq.tables.records.ScanBookRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScanBook extends TableImpl<ScanBookRecord> {

	private static final long serialVersionUID = 511136983;

	/**
	 * The reference instance of <code>Scan_Book</code>
	 */
	public static final ScanBook SCAN_BOOK = new ScanBook();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ScanBookRecord> getRecordType() {
		return ScanBookRecord.class;
	}

	/**
	 * The column <code>Scan_Book.scan_id</code>.
	 */
	public final TableField<ScanBookRecord, BigDecimal> SCAN_ID = createField("scan_id", org.jooq.impl.SQLDataType.NUMERIC, this, "");

	/**
	 * The column <code>Scan_Book.book_scan_id</code>.
	 */
	public final TableField<ScanBookRecord, String> BOOK_SCAN_ID = createField("book_scan_id", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * Create a <code>Scan_Book</code> table reference
	 */
	public ScanBook() {
		this("Scan_Book", null);
	}

	/**
	 * Create an aliased <code>Scan_Book</code> table reference
	 */
	public ScanBook(String alias) {
		this(alias, SCAN_BOOK);
	}

	private ScanBook(String alias, Table<ScanBookRecord> aliased) {
		this(alias, aliased, null);
	}

	private ScanBook(String alias, Table<ScanBookRecord> aliased, Field<?>[] parameters) {
		super(alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ScanBookRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ScanBookRecord, ?>>asList(Keys.FK_SCAN_BOOK_SCANRESULT_1, Keys.FK_SCAN_BOOK_BOOK_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ScanBook as(String alias) {
		return new ScanBook(alias, this);
	}

	/**
	 * Rename this table
	 */
	public ScanBook rename(String name) {
		return new ScanBook(name, null);
	}
}
